{"version":3,"sources":["ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","state","hasError","error","info","console","this","setState","children","props","Component","examples","App","tempModel","tests","label","value","validationResult","schema","form","model","schemaJson","formJson","selected","showErrors","setStateDefault","onSelectChange","target","endsWith","log","fetch","then","x","json","JSON","stringify","undefined","catch","elem","onModelChange","key","val","type","newModel","utils","selectOrSet","onValidate","result","validateBySchema","onFormChange","parse","e","onSchemaChange","mapper","RcSelect","schemaForm","validate","length","Button","variant","color","onClick","className","style","display","FormControl","classes","root","minWidth","InputLabel","htmlFor","Select","autoWidth","name","inputProps","id","onChange","map","MenuItem","mode","theme","height","width","setOptions","useWorker","editorProps","$blockScrolling","React","Boolean","window","location","hostname","match","createMuiTheme","typography","useNextVariants","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ee88d4d.chunk.js","sourcesContent":["// @flow\nimport React, { Component } from \"react\";\nimport type { ChildrenArray } from \"react\";\n\ntype Props = {\n    children: ChildrenArray<*>\n};\n\ntype State = {\n    hasError: boolean\n};\n\nclass ErrorBoundary extends Component<Props, State> {\n    state = { hasError: false };\n\n    componentDidCatch(error, info) {\n        // eslint-disable-next-line no-console\n        console.error(error, info);\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        const { hasError } = this.state;\n        const { children } = this.props;\n        if (hasError) {\n            return <h1>Something went wrong when building the form.</h1>;\n        }\n        return children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport { SchemaForm, utils } from \"react-schema-form\";\nimport \"ace-builds\";\n//import 'ace-builds/webpack-resolver'\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport AceEditor from \"react-ace\";\nimport {\n    Button,\n    FormControl,\n    InputLabel,\n    MenuItem,\n    Select\n} from \"@material-ui/core\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { RcSelect } from \"react-schema-form-rc-select\";\n\nconst examples = {\n};\n\ntype State = {\n    showErrors: boolean\n};\n\nclass App extends React.Component<void, State> {\n    tempModel = {};\n\n    state = {\n        tests: [\n            { label: \"Simple Text\", value: 'data/simple.json' },\n            { label: \"Static Single\", value: 'data/static-single.json'},\n            { label: \"Static Multiple\", value: 'data/static-multiple.json'},\n            { label: \"Relative Ref\", value: 'data/relative-ref.json'},\n            { label: \"RC Select\", value: 'data/rcselect.json' }\n        ],\n        validationResult: {},\n        schema: {},\n        form: [],\n        model: {},\n        schemaJson: \"\",\n        formJson: \"\",\n        selected: \"\",\n        showErrors: false\n    };\n\n    setStateDefault = () => this.setState({ model: this.tempModel });\n\n    onSelectChange = ({ target: { value } }) => {\n        if (!value) {\n            this.setState({\n                schemaJson: \"\",\n                formJson: \"\",\n                selected: \"\",\n                schema: {},\n                model: {},\n                form: [],\n                showErrors: false\n            });\n        }\n\n        if (!value.endsWith(\"json\")) {\n            const elem = examples[value];\n            this.setState({\n                schemaJson: JSON.stringify(elem.schema, undefined, 2),\n                formJson: JSON.stringify(elem.form, undefined, 2),\n                selected: value,\n                schema: elem.schema,\n                model: elem.model || {},\n                form: elem.form,\n                showErrors: false\n            });\n        } else {\n            console.log(value);\n            fetch(value)\n                .then(x => x.json())\n                .then(({ form, schema, model }) => {\n                    this.setState({\n                        schemaJson: JSON.stringify(schema, undefined, 2),\n                        formJson: JSON.stringify(form, undefined, 2),\n                        selected: value,\n                        schema,\n                        model: model || {},\n                        form,\n                        showErrors: false\n                    });\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }\n    };\n\n    onModelChange = (key, val, type) => {\n        const { model } = this.state;\n        const newModel = model;\n        utils.selectOrSet(key, newModel, val, type);\n        this.setState({ model: newModel });\n    };\n\n    onValidate = () => {\n        const { schema, model } = this.state;\n        const result = utils.validateBySchema(schema, model);\n        this.setState({ validationResult: result, showErrors: true });\n    };\n\n    onFormChange = val => {\n        try {\n            const form = JSON.parse(val);\n            this.setState({ formJson: val, form });\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    onSchemaChange = val => {\n        try {\n            const schema = JSON.parse(val);\n            this.setState({ schemaJson: val, schema });\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    render() {\n        const {\n            schema,\n            form,\n            model,\n            validationResult,\n            selected,\n            tests,\n            formJson,\n            schemaJson,\n            showErrors\n        } = this.state;\n        const mapper = {\n            \"rc-select\": RcSelect\n        };\n\n        let schemaForm = \"\";\n        let validate = \"\";\n        if (form.length > 0) {\n            schemaForm = (\n                <ErrorBoundary>\n                    <SchemaForm\n                        schema={schema}\n                        form={form}\n                        onModelChange={this.onModelChange}\n                        mapper={mapper}\n                        model={model}\n                        showErrors={showErrors}\n                    />\n                </ErrorBoundary>\n            );\n            validate = (\n                <div>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={this.onValidate}\n                    >\n                        Validate\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={this.setStateDefault}\n                    >\n                        Throw temp model in\n                    </Button>\n                    <pre>{JSON.stringify(validationResult, undefined, 2)}</pre>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"col-md-12\">\n                <h1>Schema Form Example</h1>\n                <div className=\"row\">\n                    <div className=\"col-sm-4\">\n                        <h3 style={{ display: \"inline-block\" }}>\n                            The Generated Form\n                        </h3>\n                        {schemaForm}\n                        <h3>Model</h3>\n                        <pre>{JSON.stringify(model, undefined, 2)}</pre>\n                        {validate}\n                    </div>\n                    <div className=\"col-sm-8\">\n                        <h3>Select Example</h3>\n                        <FormControl\n                            classes={{ root: \"form-group\" }}\n                            style={{ minWidth: 150 }}\n                        >\n                            <InputLabel htmlFor=\"select-test\">\n                                select-test\n                            </InputLabel>\n                            <Select\n                                autoWidth\n                                name=\"selectTest\"\n                                inputProps={{\n                                    name: \"selectTest\",\n                                    id: \"select-test\"\n                                }}\n                                value={selected}\n                                onChange={this.onSelectChange}\n                            >\n                                {tests.map(({ label, value }) => (\n                                    <MenuItem key={value} value={value}>\n                                        {label}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                        <h3>Form</h3>\n                        <AceEditor\n                            mode=\"json\"\n                            theme=\"github\"\n                            height=\"300px\"\n                            width=\"800px\"\n                            onChange={this.onFormChange}\n                            name=\"aceForm\"\n                            setOptions={{ useWorker: false }}\n                            value={formJson}\n                            editorProps={{ $blockScrolling: true }}\n                        />\n                        <h3>Schema</h3>\n                        <AceEditor\n                            mode=\"json\"\n                            theme=\"github\"\n                            height=\"300px\"\n                            width=\"800px\"\n                            onChange={this.onSchemaChange}\n                            name=\"aceSchema\"\n                            setOptions={{ useWorker: false }}\n                            value={schemaJson}\n                            editorProps={{ $blockScrolling: true }}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n});\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}